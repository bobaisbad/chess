actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username already exists
DataAccess --> Service: UserData
Service --> Server: TakenException
Server --> Client: 403\n{"message": "Error: already taken"}
end
DataAccess --> Service: null
Service -> DataAccess:createUser(RegisterRequest)
DataAccess -> db: Create and Add UserData
Service -> DataAccess:createAuth(username)
DataAccess -> db: Create and Add AuthData
DataAccess --> Service: authToken
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group #orange Login #white
Client -> Server: [POST] /session\n{"username":" ", "password":" "}

///////////////////////////////////////

Server -> Handler: {"username":" ", "password":" "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess:getUser(username)
DataAccess -> db: Find UserData by username
break Invalid username and/or password
DataAccess --> Service: null
Service --> Server: UnauthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess --> Service: UserData
Service -> DataAccess: createAuth(username)
DataAccess -> db: Create and Add authData
DataAccess --> Service: authToken
Service --> Handler: LoginResult
Handler --> Server: {"username":" ", "authToken":" "}
Server --> Client: 200\n{"username":" ", "authToken":" "}

///////////////////////////////////////

end

group #green Logout #white
Client -> Server: [DELETE] /session\nauthToken

///////////////////////////////////////

Server -> Handler: authToken
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: validateAuth(authToken)
DataAccess -> db: Find AuthData
break Invalid authToken
DataAccess --> Service: false
Service --> Server: UnauthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess --> Service: true
Service -> DataAccess: deleteAuth(authToken)
DataAccess -> db: Delete AuthData

Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: 200\n{}

///////////////////////////////////////

end

group #red List Games #white
Client -> Server: [GET] /game\nauthToken

///////////////////////////////////////

Server -> Handler: authToken
Handler -> Service: list(ListRequest)
Service -> DataAccess: validateAuth(authToken)
DataAccess -> db: Find AuthData
break Invalid authToken
DataAccess --> Service: false
Service --> Server: UnauthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess --> Service: true
Service -> DataAccess: listGames()
DataAccess -> db: Find all GameData
DataAccess --> Service: GameInfo
Service --> Handler: ListResult
Handler --> Server: {"games": [{"gameID": 1234, "whiteUsername":" ", "blackUsername":" ", "gameName:" "}]}
Server --> Client: 200\n{"games": [{"gameID": 1234, "whiteUsername":" ", "blackUsername":" ", "gameName:" "}]}

///////////////////////////////////////

end

group #purple Create Game #white
Client -> Server: [POST] /game\nauthToken\n{"gameName":" "}

///////////////////////////////////////

Server -> Handler:authToken\n{"gameName":" "}
Handler -> Service: create(CreateRequest)
Service -> DataAccess: validateAuth(authToken)
DataAccess -> db: Find AuthData
break Invalid authToken
DataAccess --> Service: false
Service --> Server: UnauthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess --> Service: true
Service -> DataAccess:createGame(gameName)
DataAccess -> db: Create and Add GameData
DataAccess --> Service: gameID
Service --> Handler: CreateGameResult
Handler --> Server: {"gameID": 1234}
Server --> Client: 200\n{"gameID": 1234}

///////////////////////////////////////

end

group #yellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{"playerColor":"WHITE/BLACK", "gameID": 1234}

///////////////////////////////////////

Server -> Handler: authToken\n{"playerColor":"WHITE/BLACK", "gameID": 1234}
Handler -> Service: joinGame(JoinRequest)
Service -> DataAccess: validateAuth(authToken)
DataAccess -> db: Find AuthData
break Invalid authToken
DataAccess --> Service: false
Service --> Server: UnauthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess --> Service: true
Service -> DataAccess: getGame(gameID)
DataAccess -> db: Find GameData by gameID
break Place in game already taken
DataAccess --> Service: null
Service --> Server: BadRequest
Server --> Client: 400\n{"message": "Error: bad request"}
end
DataAccess --> Service: GameData
break Place in game already taken
Service --> Server: TakenException
Server --> Client: 403\n{"message": "Error: already taken"}
end
Service -> DataAccess: getUsername(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: username
Service -> DataAccess: updateGame(gameData, playerColor, username)
DataAccess -> db: Update game to include user
Service --> Handler: JoinGameResult
Handler --> Server: {}
Server --> Client: 200\n{}

///////////////////////////////////////

end

group #gray Clear application #white
Client -> Server: [DELETE] /db

///////////////////////////////////////

Server -> Handler: {}
Handler -> Service:clearAllData()
Service -> DataAccess: clearUsers()
DataAccess -> db: Clear UserData
Service -> DataAccess: clearGames()
DataAccess -> db: Clear GameData
Service -> DataAccess: clearAuths()
DataAccess -> db: Clear AuthData
Service --> Handler: ClearResult
Handler --> Server: {}
Server --> Client: 200\n{}

///////////////////////////////////////

end
